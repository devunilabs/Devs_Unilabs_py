# ==============================================================================
# 2. ia_agent/email_notifier.py - SISTEMA DE NOTIFICACIONES
# ==============================================================================

import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import logging

class EmailNotifier:
    """Sistema de notificaciones por email con soporte Outlook y SMTP corporativo"""
    
    def __init__(self, email_config: dict):
        self.config = email_config
        self.logger = logging.getLogger(__name__)
        
    def _create_smtp_connection(self):
        """Crea conexi√≥n SMTP seg√∫n configuraci√≥n"""
        try:
            if self.config.get('use_corporate_smtp', False):
                # SMTP Corporativo
                smtp_config = self.config['corporate_smtp']
                server = smtplib.SMTP(smtp_config['server'], smtp_config['port'])
                
                if smtp_config.get('auth_required', True):
                    server.starttls()
                    server.login(self.config['username'], self.config['password'])
                
            else:
                # Outlook/Gmail est√°ndar
                server = smtplib.SMTP(self.config['smtp_server'], self.config['smtp_port'])
                server.starttls()
                server.login(self.config['username'], self.config['password'])
            
            return server
            
        except Exception as e:
            self.logger.error(f"Error creando conexi√≥n SMTP: {str(e)}")
            return None
    
    def _send_email(self, subject: str, body: str, is_html: bool = False):
        """Env√≠a email gen√©rico"""
        try:
            msg = MIMEMultipart()
            msg['From'] = self.config['from_email']
            msg['To'] = self.config['to_email']
            msg['Subject'] = subject
            
            msg.attach(MIMEText(body, 'html' if is_html else 'plain', 'utf-8'))
            
            server = self._create_smtp_connection()
            if server:
                server.send_message(msg)
                server.quit()
                self.logger.info(f"Email enviado: {subject}")
                return True
            else:
                return False
                
        except Exception as e:
            self.logger.error(f"Error enviando email: {str(e)}")
            return False
    
    def send_system_start_notification(self):
        """Notifica inicio del sistema"""
        subject = "ü§ñ IA REENVIOCATALOG - Sistema Iniciado"
        
        body = f"""
        <h2>Sistema IA REENVIOCATALOG Iniciado</h2>
        
        <p><strong>Fecha/Hora:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        
        <h3>Estado del Sistema:</h3>
        <ul>
            <li>‚úÖ IA Agent Orquestador: Activo</li>
            <li>‚úÖ Backend Autom√°tico: Iniciado</li>
            <li>‚úÖ Monitor de Logs: Activo</li>
            <li>‚úÖ Sincronizaci√≥n: Cada 2 minutos</li>
        </ul>
        
        <p><strong>El sistema est√° funcionando de forma completamente autom√°tica.</strong></p>
        <p>Recibir√°s notificaciones por cada sincronizaci√≥n y cualquier error detectado.</p>
        
        <hr>
        <p><small>Mensaje generado autom√°ticamente por IA Agent REENVIOCATALOG</small></p>
        """
        
        self._send_email(subject, body, is_html=True)
    
    def send_sync_success_notification(self, sync_number: int, analysis: str, log_line: str):
        """Notifica sincronizaci√≥n exitosa con an√°lisis IA"""
        subject = f"‚úÖ REENVIOCATALOG - Sincronizaci√≥n #{sync_number} Exitosa"
        
        body = f"""
        <h2>Sincronizaci√≥n Exitosa #{sync_number}</h2>
        
        <p><strong>Fecha/Hora:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        
        <h3>An√°lisis IA del Cambio:</h3>
        <p>{analysis}</p>
        
        <h3>Detalles T√©cnicos:</h3>
        <p><code>{log_line}</code></p>
        
        <h3>Estado del Sistema:</h3>
        <p>üü¢ Sistema operativo - Pr√≥xima verificaci√≥n en 2 minutos</p>
        
        <hr>
        <p><small>An√°lisis generado autom√°ticamente por IA Agent REENVIOCATALOG</small></p>
        """
        
        self._send_email(subject, body, is_html=True)
    
    def send_error_notification(self, error_count: int, analysis: str, log_line: str):
        """Notifica errores con an√°lisis IA"""
        subject = f"‚ùå REENVIOCATALOG - Error Detectado (#{error_count})"
        
        body = f"""
        <h2>Error Detectado en el Sistema</h2>
        
        <p><strong>Fecha/Hora:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        <p><strong>N√∫mero de Error:</strong> #{error_count}</p>
        
        <h3>An√°lisis IA del Error:</h3>
        <p style="color: red;"><strong>{analysis}</strong></p>
        
        <h3>Log del Error:</h3>
        <p><code style="background-color: #f5f5f5; padding: 10px;">{log_line}</code></p>
        
        <h3>Acciones Autom√°ticas:</h3>
        <ul>
            <li>üîç IA monitoreando para recuperaci√≥n autom√°tica</li>
            <li>üîÑ Reinicio autom√°tico si persisten errores</li>
            <li>üìß Notificaciones continuas hasta resoluci√≥n</li>
        </ul>
        
        <hr>
        <p><small>An√°lisis de error generado autom√°ticamente por IA Agent REENVIOCATALOG</small></p>
        """
        
        self._send_email(subject, body, is_html=True)